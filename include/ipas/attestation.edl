enclave {

	from "sgx_tsgxssl.edl" import *;
	from "sgx_pthread.edl" import *;

	include "sgx_tcrypto.h"
	include "ipas/errors.h"

	trusted {
		// creates key pair and nonce
		public ipas_status ipas_ma_create_keys([out] sgx_ec256_public_t *pub, [out, count=16] uint8_t *nonce, uint32_t sid, int role);

		// computes report for local attestation with QE
		public ipas_status ipas_ma_create_report([out] sgx_report_t *report, uint32_t sid, [in] sgx_target_info_t *qe_target_info, [in] sgx_ec256_public_t *peer_pub);

		// validate reports received from IAS, and compute shared secret keys
		public int ipas_ma_validate_reports(uint32_t sid,
				uint32_t status_a,
				[in, string] char *rid_a,
				[in, string] char *sig_a,
				[in, string] char *cc_a,
				[in, string] char *report_a,
				uint32_t status_b,
				[in, string] char *rid_b,
				[in, string] char *sig_b,
				[in, string] char *cc_b,
				[in, string] char *report_b);

		// create response and compute tag
		public int ipas_ma_prepare_m4(uint32_t sid, [out, count=64] uint8_t *data, [out, count=16] uint8_t *tag);

		// check MAC and response
		public int ipas_ma_process_m4(uint32_t sid, [in, count=64] uint8_t *data, [in, count=16] uint8_t *tag);
	};

	untrusted {
	};
};
